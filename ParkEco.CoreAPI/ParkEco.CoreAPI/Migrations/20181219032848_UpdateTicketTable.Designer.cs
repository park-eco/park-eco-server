// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkEco.CoreAPI.Data;

namespace ParkEco.CoreAPI.Migrations
{
    [DbContext(typeof(ParkingEcoServerContext))]
    [Migration("20181219032848_UpdateTicketTable")]
    partial class UpdateTicketTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ParkEco.CoreAPI.Data.Models.AttendantAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ParkingLotAttendantId");

                    b.Property<Guid>("ParkingLotId");

                    b.HasKey("Id");

                    b.HasIndex("ParkingLotAttendantId");

                    b.HasIndex("ParkingLotId");

                    b.ToTable("AttendantAssignments");
                });

            modelBuilder.Entity("ParkEco.CoreAPI.Data.Models.ParkingLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("CurrentCount");

                    b.Property<string>("Description");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("MaximumCapacity");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ParkingLots");
                });

            modelBuilder.Entity("ParkEco.CoreAPI.Data.Models.ParkingLotAttendant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("ParkingLotAttendants");
                });

            modelBuilder.Entity("ParkEco.CoreAPI.Data.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("From");

                    b.Property<Guid>("ParkingLotId");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.HasIndex("ParkingLotId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ParkEco.CoreAPI.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfCreated");

                    b.Property<bool>("IsReturned");

                    b.Property<bool>("IsValid");

                    b.Property<Guid>("ParkingLotAttendantId");

                    b.Property<string>("Plate")
                        .IsRequired();

                    b.Property<Guid>("SecretKey");

                    b.Property<Guid?>("SessionId");

                    b.HasKey("Id");

                    b.HasIndex("ParkingLotAttendantId");

                    b.HasIndex("SessionId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ParkEco.CoreAPI.Data.Models.AttendantAssignment", b =>
                {
                    b.HasOne("ParkEco.CoreAPI.Data.Models.ParkingLotAttendant", "ParkingLotAttendant")
                        .WithMany()
                        .HasForeignKey("ParkingLotAttendantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParkEco.CoreAPI.Data.Models.ParkingLot", "ParkingLot")
                        .WithMany("AttendantAssignments")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParkEco.CoreAPI.Data.Models.Session", b =>
                {
                    b.HasOne("ParkEco.CoreAPI.Data.Models.ParkingLot", "ParkingLot")
                        .WithMany("Sessions")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParkEco.CoreAPI.Data.Models.Ticket", b =>
                {
                    b.HasOne("ParkEco.CoreAPI.Data.Models.ParkingLotAttendant", "ParkingLotAttendant")
                        .WithMany("Tickets")
                        .HasForeignKey("ParkingLotAttendantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParkEco.CoreAPI.Data.Models.Session")
                        .WithMany("Tickets")
                        .HasForeignKey("SessionId");
                });
#pragma warning restore 612, 618
        }
    }
}
